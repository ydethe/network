from typing import List, Tuple

from umbral import (
    VerifiedCapsuleFrag,
    VerifiedKeyFrag,
    PublicKey,
    generate_kfrags,
    encrypt,
    SecretKey,
    Signer,
    decrypt_original,
    pre,
)
from umbral.capsule import Capsule

from .models import DbUser


class User(DbUser):
    @classmethod
    def fromDatabaseUser(cls, db_user: DbUser) -> "User":
        pass

    @property
    def public_key(self) -> PublicKey:
        private_key = SecretKey.from_bytes(self.private_key)
        return private_key.public_key()

    @property
    def verifying_key(self) -> PublicKey:
        signing_key = SecretKey.from_bytes(self.signing_key)
        return signing_key.public_key()

    def encrypt(self, plaintext: bytes) -> Tuple[Capsule, bytes]:
        """Encrypt a message

        Args:
            plaintext: Clear content. Ca be anything

        Returns:
            The encapsulated symmetric key use to encrypt it
            The ciphertext

        """
        private_key = SecretKey.from_bytes(self.private_key)
        public_key = private_key.public_key()
        capsule, ciphertext = encrypt(public_key, plaintext)
        return capsule, ciphertext

    def decrypt(self, capsule: Capsule, ciphertext: bytes) -> bytes:
        """Decrypt a message

        Args:
            capsule: The encapsulated symmetric key returnd by the encrypt method
            ciphertext: The ciphertext returnd by the encrypt method

        Returns:
            The plaintext message

        """
        private_key = SecretKey.from_bytes(self.private_key)
        cleartext = decrypt_original(private_key, capsule, ciphertext)
        return cleartext

    def generate_kfrags(
        self, rx_public_key: PublicKey, threshold: int, shares: int
    ) -> List[VerifiedKeyFrag]:
        """Generate "M of N" re-encryption key fragments (or "KFrags") for the receiver

        Args:
            rx_public_key: The public key of the receiver
            threshold: The number of VerifiedCapsuleFrag necessary to decrypt the mesage
            shares: Total number of VerifiedCapsuleFrag generated

        Returns:
            A list of kfrags

        """
        signing_key = SecretKey.from_bytes(self.signing_key)
        private_key = SecretKey.from_bytes(self.private_key)
        signer = Signer(signing_key)
        kfrags = generate_kfrags(
            delegating_sk=private_key,
            receiving_pk=rx_public_key,
            signer=signer,
            threshold=threshold,
            shares=shares,
        )
        return kfrags

    def decrypt_reencrypted(
        self,
        tx_public_key: PublicKey,
        cfrags: List[VerifiedCapsuleFrag],
        capsule: Capsule,
        ciphertext: bytes,
    ) -> bytes:
        """Decrypt the message sent by another User

        Args:
            tx_public_key: The public key of the sender
            cfrags: List of VerifiedCapsuleFrag generated by the proxies
            capsule: The encapsulated symmetric key returnd by the encrypt method
            ciphertext: The ciphertext returnd by the encrypt method

        Returns:
            The plaintext message

        """
        private_key = SecretKey.from_bytes(self.private_key)
        cleartext = pre.decrypt_reencrypted(
            receiving_sk=private_key,
            delegating_pk=tx_public_key,
            verified_cfrags=cfrags,
            capsule=capsule,
            ciphertext=ciphertext,
        )
        return cleartext
